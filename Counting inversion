BRUTE FORCE APPROACH
ARR[] = [8,4,2,1]
TAKE A POINTER I AND COUNT = 0;
for(int i =0;i<n;i++){ 
  for(int j = i + 1;j<n;j++){ 
    if(i<j && a[i] > a[j]){
      count ++;
    }
  }
}
return count;
TIME COMPLEXITY - O(N^2) - AS IT TRAVERSES FOR EVERY ELEMENT.
SPACE COMPLEXITY WILL BE O(1).

// optimal approach using merge sort
import java.util.*;
public class Main
{
   static int merge(int arr[],int temp[],int left,int mid,int right){
       int i,j,k;
       int count_inv = 0;
       i = left;
       j = right;
       k = left;
       while((i<=mid - 1) && (j <= right)){// until i is less than or equal to mid - 1 and j is less than or equal to right.
           if(arr[i]<=arr[j]){ 
              temp[k++] = arr[i++];
           }
           else{
               temp[k++] = arr[j++];
               count_inv = count_inv + (mid - i);
           }
        }
        while(i<=mid -1){
            temp[k++] = arr[i++];
        }
        while(j<=right){
             temp[k++] = arr[j++];
        }
        for(i = left;i<=right;i++){
            arr[i] = temp[i];
        }
        return count_inv;
       
   } 
    static int mergeSort(int arr[],int temp[],int left, int right){// here parameters are left,and right
      int mid,count_inv = 0;
      if(right>left){
        mid = (left + right)/2;
        count_inv += mergeSort(arr,temp,left,mid);
        count_inv += mergeSort(arr,temp,mid + 1,right);
        
        count_inv += merge(arr,temp,left,mid + 1,right);
        
      }
      return count_inv;
    }
    public static void main(String args[]){
    int n;
    Scanner sc = new Scanner(System.in);
    n = sc.nextInt();
    int []temp = new int[n];
    int []arr = new int[n];
    for(int i = 0;i<n;i++){
        arr[i] = sc.nextInt();
    }
    int ans = mergeSort(arr,temp,0,arr.length-1);// this is a merge sort function.
    System.out.println(ans);
  }
}
TIME COMPLEXITY - O(NLOGN)
SPACE COMPLEXITY - O(N)
